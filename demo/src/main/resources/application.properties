#version1
###produce
#bootstrap.servers=10.20.135.20:9092
#producer.type=sync
#request.required.acks=1
#serializer.class=kafka.serializer.DefaultEncoder
#key.serializer=org.apache.kafka.common.serialization.StringSerializer
#value.serializer=org.apache.kafka.common.serialization.StringSerializer
#bak.partitioner.class=kafka.producer.DefaultPartitioner
#bak.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#bak.value.serializer=org.apache.kafka.common.serialization.StringSerializer
#
###consume
#zookeeper.connect=10.20.135.20:2181
#group.id=test-consumer-group
#zookeeper.session.timeout.ms=4000
#zookeeper.sync.time.ms=200
##enable.auto.commit=false
#auto.commit.interval.ms=1000
#auto.offset.reset=smallest
#
## kafka消息配置信息
#kafka.consumer.topic=test
#kafka.consumer.key.989847=989847
#kafka.consumer.key.989848=989848
#kafka.consumer.key.989849=989849
#kafka.consumer.key.989850=989850
#version2
# 消费者
#spring:
#    kafka:
#        consumer:
#            group-id:foo
#            auto-offset-reset:earliest
#            bootstrap-servers:localhost:9092
## 生产者
#        producer:
#            bootstrap-servers:localhost:9092
#            key-serializer:org.apache.kafka.common.serialization.StringSerializer
#            value-serializer:org.apache.kafka.common.serialization.StringSerializer
#version3
server.port=8089
#============== kafka ===================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=127.0.0.1:9092
#=============== provider  =======================
spring.kafka.producer.retries=0
# 每次批量发送消息的数量
# 写入失败时，重试次数。当leader节点失效，一个repli节点会替代成为leader节点，此时可能出现写入失败，
# 当retris为0时，produce不会重复。retirs重发，此时repli节点完全成为leader节点，不会产生消息丢失。
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
#procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#可以设置的值为：all, -1, 0, 1
spring.kafka.producer.acks=1
# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
#=============== consumer  =======================
# 指定默认消费者group id
spring.kafka.consumer.group-id=test-hello-group
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.auto-commit-interval=100
# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#kafka默认端口是9092，zk默认端口是2181
